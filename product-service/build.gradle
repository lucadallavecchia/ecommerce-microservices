plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

group = "${projectGroup}"
version = "${majorVersion}.${minorVersion}.${patchVersion}"

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // h2
    implementation group: 'com.h2database', name: 'h2', version: "${h2Version}"

    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    // lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapStructBindingVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('updateReadme') {
    doLast {
        def readmeFile = file("${rootDir}/README.md")
        def readmeText = readmeFile.text
        def group = "${projectGroup}"
        def version = "${majorVersion}.${minorVersion}.${patchVersion}"

        def updatedText = readmeText.replaceFirst(
                /(?s)(?<=<!-- START_VERSION -->).*?(?=<!-- END_VERSION -->)/,
                "\n- **Group:** ${group}\n- **Version:** ${version}\n"
        )

        readmeFile.text = updatedText
    }
}